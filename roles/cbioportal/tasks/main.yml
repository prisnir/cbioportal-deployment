---
- name: cBioPortal | Install git
  apt: name={{ item }} update_cache=yes cache_valid_time=3600 state=present
  with_items:
  - git
  - maven
  - python-mysqldb

- name: cBioPortal | Clone the repository
  git:
    repo: "{{cbioportal_repository}}"
    dest: "{{build_dir}}"
    version: "{{cbioportal_version}}"

- name: cBioPortal | Clone the overlay repository
  git:
    repo: "{{cbioportal_overlay_repository}}"
    dest: "{{build_overlay_dir}}"
    version: "{{cbioportal_overlay_version}}"

- name: cBioPortal | Clone the importer repository
  git:
    repo: "{{cbioportal_importer_repository}}"
    dest: "{{build_importer_dir}}"
    version: "{{cbioportal_importer_version}}"

- name: cBioPortal | Copy any files we need to edit
  command: cp "{{item.src}}" "{{item.dest}}" chdir="{{build_dir}}" creates="{{build_dir}}/{{item.dest}}"
  with_items:
    - {src: "src/main/resources/portal.properties.EXAMPLE", dest: "portal.properties"}
    - {src: "src/main/resources/log4j.properties.EXAMPLE", dest: "log4j.properties"}

- name: cBioPortal | Patch portal.properties
  lineinfile:
    dest: "{{build_dir}}/portal.properties"
    regexp: '^{{item.key}}\s*=\s*(.*)$'
    line: "{{item.key}}={{item.value}}"
    state: present
    insertafter: EOF
    backrefs: no
  with_items: "{{portal_settings}}"

- name: cBioPortal | Copy the second portal.properties file
  command: cp "{{item.src}}" "{{item.dest}}" chdir="{{build_dir}}" creates="{{build_dir}}/{{item.dest}}"
  with_items:
    - {src: "portal.properties", dest: "src/main/resources/portal.properties"}
    - {src: "log4j.properties", dest: "src/main/resources/log4j.properties"}

## Question. Should we run this with idempotence? I'm thinking not, because the
## repository might have changed. Best to clean and do a complete build,
## at least until we have a better way. That will typically involve using something
## which doesn't even compile.

- name: cBioPortal | Build cBioPortal
  command: >
    env PORTAL_HOME={{build_dir}} mvn {{cbioportal_build_options}} clean compile test package install -Ddb.test.username={{mysql_database_user}} -Ddb.test.password={{mysql_database_password}}
    chdir="{{build_dir}}"

## Detecting the version is a little bit complex. We need to evaluate and extract
## a given string. This is a sneaky way to do it in Maven. Note that we pipe in and
## use interactive as that allows us to prefix and therefore detect the version
## in a huge mess of Maven logging.
##
## We'll also need to use a Jinja2 filter to remove the prefix value from here on.

- name: cBioPortal | Detect version in pom.xml
  shell: >
    echo 'version=${project.version}' | mvn -N org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate | grep "^version="
    chdir="{{build_dir}}"
  register: cbioportal_version

- name: cBioPortal | Detect db.version in pom.xml
  shell: >
    echo 'version=${db.version}' | mvn -N org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate | grep "^version="
    chdir="{{build_dir}}"
  register: cbioportal_db_version

- name: cBioPortal | Copy the cBioPortal version into a stored file
  shell: >
    echo "{{cbioportal_version.stdout | replace('version=', '')}}" > {{webapp_directory}}/version

- name: cBioPortal | Build cBioPortal importer
  command: >
    mvn clean compile test package install
    chdir="{{build_importer_dir}}"

- name: cBioPortal | Detect version in pom.xml
  shell: >
    echo 'version=${project.version}' | mvn -N org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate | grep "^version="
    chdir="{{build_importer_dir}}"
  register: cbioportal_importer_version

- name: cBioPortal | Copy the importer version into a stored file
  shell: >
    echo "{{cbioportal_importer_version.stdout | replace('version=', '')}}" > {{webapp_directory}}/importer-version

- name: cBioPortal | Build cBioPortal overlay
  command: >
    mvn clean compile test package install
    chdir="{{build_overlay_dir}}"

- name: cBioPortal | Detect version in pom.xml
  shell: >
    echo 'version=${project.version}' | mvn -N org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate | grep "^version="
    chdir="{{build_overlay_dir}}"
  register: cbioportal_overlay_version

- name: cBioPortal | Copy the overlay version into a stored file
  shell: >
    echo "{{cbioportal_overlay_version.stdout | replace('version=', '')}}" > {{webapp_directory}}/overlay-version

- name: cBioPortal | Create directories
  command: mkdir -p {{ item.path }} creates={{ item.path }}
  with_items:
    - { path: '{{webapp_directory}}' }
    - { path: '{{webapp_log_directory}}' }
    - { path: '{{webapp_pid_directory}}' }

- name: cBioPortal | Copy the built portal overlay to replace the default
  command: >
    cp {{build_overlay_dir}}/target/cbioportal-octane-{{cbioportal_overlay_version.stdout | replace('version=', '')}}.war {{webapp_directory}}/cbioportal-{{cbioportal_version.stdout | replace('version=', '')}}.war

- name: cBioPortal | Copy the built scripts jar
  command: >
    cp {{build_dir}}/scripts/target/scripts-{{cbioportal_version.stdout | replace('version=', '')}}.jar {{webapp_directory}}

- name: cBioPortal | Copy the built runner executable
  command: >
    cp {{build_importer_dir}}/target/cbioportal-importer-{{cbioportal_importer_version.stdout | replace('version=', '')}}-jar-with-dependencies.jar {{webapp_directory}}/cbioportal-importer-{{cbioportal_importer_version.stdout | replace('version=', '')}}.jar

- name: cBioPortal | Copy the cBioPortal version into a stored file
  shell: >
    echo "{{cbioportal_version.stdout | replace('version=', '')}}" > {{webapp_directory}}/version

- name: cBioPortal | Download Jetty
  get_url:
    dest: '{{jetty_target}}'
    url: '{{jetty_url}}'

- name: cBioPortal | Copy the built portal.properties file
  command: cp "{{item.src}}" "{{item.dest}}" chdir="{{build_dir}}" creates="{{build_dir}}/{{item.dest}}"
  with_items:
    - {src: "portal.properties", dest: "{{webapp_directory}}/portal.properties"}
    - {src: "log4j.properties", dest: "{{webapp_directory}}/log4j.properties"}

- name: cBioPortal | Write configuration files
  template: src={{ item.src }} dest={{ item.dest }} mode={{ item.mode }}
  notify:
    - restart service
  with_items:
    - { src: "cbioportal.xml.j2", dest: "{{webapp_directory}}/cbioportal.xml", mode: '0755' }
    - { src: "cbioportal-import.xml.j2", dest: "{{webapp_directory}}/cbioportal-import.xml", mode: '0755' }
    - { src: "override-web.xml.j2", dest: "{{webapp_directory}}/override-web.xml", mode: '0755' }
    - { src: "cbioportal.init.j2", dest: "/etc/init.d/{{webapp_service_name}}", mode: '0755' }
    - { src: "cbioportal-webapp.xml.j2", dest: "/tmp/cbioportal-webapp.xml" }

## Slightly cunning. cat the file to put the templated content into
## a variable. Then we can write it into the cBioPortal master
## Jetty config.

- name: cBioPortal | Read the templated configuration
  command: cat /tmp/cbioportal-webapp.xml
  register: cbioportal_webapp_xml_data

- name: cBioPortal | Edit the configuration file body
  blockinfile:
    dest: {{webapp_directory}}/cbioportal.xml
    marker: "<!-- {mark} WEBAPP -->"
    block: |
      {{ cbioportal_webapp_xml_data.stdout }}

- name: cBioPortal | Edit the configuration file handler
  blockinfile:
    dest: {{webapp_directory}}/cbioportal.xml
    marker: "<!-- {mark} WEBAPP HANDLER -->"
    block: "<Item><Ref refid="webapp"/></Item>"

- name: cBioPortal | Patch portal.properties
  lineinfile:
    dest: "{{build_dir}}/portal.properties"
    regexp: '^db.version\s*=\s*(.*)$'
    line: "db.version={{cbioportal_db_version.stdout | replace('version=', '')}}"
    state: present
    insertafter: EOF
    backrefs: no

- name: cBioPortal | Update the database schema
  shell: >
     yes | python {{build_dir}}/core/src/main/scripts/migrate_db.py -p {{webapp_directory}}/portal.properties -s {{build_dir}}/core/src/main/resources/db/migration.sql

- name: cBioPortal | Create user
  user: name={{webapp_service_user}} comment="{{webapp_service_user}} webapp" state=present

- name: cBioPortal | Assign files to the user
  file: path={{ item.path }} recurse=yes owner={{webapp_service_user}} group=adm mode={{ item.mode }}
  with_items:
    - { path: '{{webapp_log_directory}}', mode: '0750' }
    - { path: '{{webapp_pid_directory}}', mode: '0750' }
    - { path: '{{webapp_directory}}', mode: '0755' }

- name: cBioPortal | ensure the service is running
  service: name={{webapp_service_name}} state=restarted enabled=yes
